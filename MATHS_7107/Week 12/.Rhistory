model.metrics <- model.cv %>%
collect_metrics()
model.prediction <- model.cv %>%
collect_predictions()
return(list(metrics = model.metrics, prediction = model.prediction))
}
genre = c(".pred_edm",".pred_latin",".pred_pop",".pred_r&b",".pred_rap",".pred_rock" )
genrename = c("edm","latin","pop","r&b","rap","rock" )
ROC_plot <- function(prediction,i){
predictions <-
prediction %>%
mutate(.pred_other = 1 - across(genre[i])) %>%
mutate(playlist_genre = ifelse(playlist_genre == genrename[i],genrename[i], "other")) %>%
mutate(playlist_genre = factor(playlist_genre, levels = c(genrename[i], "other"))) %>%
mutate(.pred_class = ifelse(.pred_class == genrename[i],genrename[i],"other"))
plot <- predictions %>% group_by( id ) %>%
roc_curve( truth = as_factor(playlist_genre), estimate = genre[i] ) %>%
ggplot(aes(x= 1-specificity, y = sensitivity)) + geom_point(alpha = 0.2, color = "red") +
ggtitle(paste("ROC curve of ", genrename[i])) + theme_minimal()
return(plot)
}
AUC_value <- function(prediction,i){
predictions <-
prediction %>%
mutate(.pred_other = 1 - across(genre[i])) %>%
mutate(playlist_genre = ifelse(playlist_genre == genrename[i],genrename[i], "other")) %>%
mutate(playlist_genre = factor(playlist_genre, levels = c(genrename[i], "other"))) %>%
mutate(.pred_class = ifelse(.pred_class == genrename[i],genrename[i],"other"))
roc_data <- predictions %>% group_by( id ) %>%
roc_curve( truth = as_factor(playlist_genre), estimate = genre[i])
return(roc_data)
}
lda.cv.model <- model_build_function(lda_model)
lda.prediction  <- lda.cv.model$prediction
lda.cv.model$metrics
lda.cfm <- confusionMatrix(lda.prediction$.pred_class, as_factor(lda.prediction$playlist_genre))
lda.cfm
plot <- lapply(1:6, function(x) (ROC_plot(lda.prediction,x)))
print(plot)
knn.cv.model <- model_build_function(knn_model_best)
knn.prediction  <- knn.cv.model$prediction
knn.cv.model$metrics
knn.cmf <- confusionMatrix(knn.prediction$.pred_class, as_factor(knn.prediction$playlist_genre))
knn.cmf
plot <- lapply(1:6, function(x) (ROC_plot(knn.prediction,x)))
rf.cv.model <- model_build_function(rf_model_best)
rf.prediction  <- rf.cv.model$prediction
rf.cv.model$metrics
confusionMatrix(rf.prediction$.pred_class, as_factor(rf.prediction$playlist_genre))
rf.cfm <- confusionMatrix(rf.prediction$.pred_class, as_factor(rf.prediction$playlist_genre))
rf.cfm
plot <- lapply(1:6, function(x) (ROC_plot(rf.prediction,x)))
set.seed(1897402)
rf.final <- rf_model_best %>%
fit( playlist_genre ~ . , data = spotify_train_prep)
rf.final %>% vip()
test_pred <- predict(rf.final, # The predictions
new_data = spotify_test_prep) %>%
bind_cols( spotify_test_prep %>%  # Add the truth
dplyr::select( playlist_genre ) )
confusionMatrix(test_pred$.pred_class,as_factor(test_pred$playlist_genre))
test_pred_prob <- predict(rf.final,
spotify_test_prep,
type = "prob" )
colnames(test_pred_prob) <- genrename
pROC::multiclass.roc(spotify_test_prep$playlist_genre,
as.matrix(test_pred_prob))
spotify_knn_tune %>% collect_metrics()
knitr::opts_chunk$set(echo = TRUE)
```{r}
spotify_rf_tune %>%
collect_metrics() %>%
mutate( min_n = as.factor( min_n ) ) %>%
ggplot( aes( x = mtry, y = mean, colour = min_n ) ) +
geom_point( size = 2 ) +
geom_line( alpha = 0.75 ) +
ggtitle("Fig37. Accuracy and ROC_AUC in different param")+
facet_wrap( ~ .metric, scales = "free", nrow = 3 )
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(skimr, tidyverse, tidymodels, themis, recipes, dials,kknn, vip,forcats,caret,MASS,discrim,yardstick,pROC)
spotify_songs_origin <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
skim(spotify_songs_origin)
text_variables <- c("track_id", "track_name", "track_artist", "track_album_id", "track_album_name")
spotify_songs <- spotify_songs_origin %>%
dplyr::select(-dplyr::any_of(text_variables))
categorical_variables <- c("playlist_name", "playlist_id", "playlist_genre", "playlist_subgenre")
spotify_songs <- spotify_songs %>%
mutate(across(all_of(categorical_variables), as.factor))
numerical_variables <- c("track_popularity","danceability", "energy", "key",
"loudness","mode", "speechiness","acousticness",
"instrumentalness", "liveness", "valence",
"tempo", "duration_ms")
spotify_songs <- spotify_songs %>%
mutate(across(all_of(numerical_variables), as.numeric))
spotify_songs <- spotify_songs %>%
mutate(track_album_release_year = as.numeric(format(as.Date(track_album_release_date, format = "%Y-%m-%d"), "%Y"))) %>%
dplyr::select(-track_album_release_date)
numerical_variables <- c(numerical_variables, "track_album_release_year")
skim(spotify_songs)
spotify_songs <- spotify_songs %>%
drop_na()
skim(spotify_songs)
playlist_id_counts <- spotify_songs %>%
count(playlist_id) %>%
arrange(desc(n))
playlist_id_counts %>% ggplot(aes(x= n)) + geom_histogram(bins = 30, color = "white") +
ggtitle("Fig1. Playlist id counts Distribution") +xlab("playlist id counts") +ylab("count")
playlist_name_counts <- spotify_songs %>%
count(playlist_name) %>%
arrange(desc(n))
playlist_name_counts %>% ggplot(aes(x= n)) + geom_histogram(bins = 30, color = "white") +
ggtitle("Fig2. Playlist name counts Distribution") +xlab("playlist name counts") +ylab("count")
playlist_subgenre_counts <- spotify_songs %>%
count(playlist_subgenre) %>%
arrange(desc(n))
playlist_subgenre_counts %>%
ggplot(aes(x = playlist_subgenre, y = n)) +
geom_bar(stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(title = "Fig3. SubGenre Counts in Playlist",
x = "Playlist SubGenre",
y = "Count")
playlist_genre_counts <- spotify_songs %>%
count(playlist_genre) %>%
arrange(desc(n))
playlist_genre_counts %>%
ggplot(aes(x = playlist_genre, y = n)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Fig4. Genre Counts in Playlist",
x = "Playlist Genre",
y = "Count")
chisq_test <- function(variable_name) {
contingency_table <- spotify_songs %>%
count(!!sym(variable_name), playlist_genre) %>%
spread(key = playlist_genre, value = n, fill = 0) %>%
column_to_rownames(var= variable_name)
chi_square_test <- chisq.test(contingency_table)
cat(variable_name)
print(chi_square_test)
}
for (variable in setdiff(categorical_variables, "playlist_genre")) {
chisq_test(variable)
}
spotify_songs <- spotify_songs %>%
dplyr::select(-setdiff(categorical_variables, "playlist_genre"))
analyze_variable_hist <- function(variable_name) {
# histogram
idx = 4 + 2*which(numerical_variables == variable_name)-1
histo_gram <- spotify_songs %>% ggplot(aes_string(variable_name)) +
geom_histogram(bins = 30,color="white") +
ggtitle(paste("Fig",idx,". Histogram of", variable_name)) +
xlab(variable_name) + ylab("count")
print(histo_gram)
}
analyze_variable_box <- function(variable_name) {
# boxplot
idx = 4 + 2*which(numerical_variables == variable_name)
box_plot <- spotify_songs %>% ggplot(aes_string(x = "playlist_genre",
y = variable_name,
fill = "playlist_genre")) +
geom_boxplot() + ggtitle(paste("Fig",idx,". Distribution of", variable_name, "in different genres")) +
xlab("Genres") + ylab(paste("Distribution of", variable_name))
print(box_plot)
}
analyze_variable_ANOVA <- function(variable_name) {
#ANOVA
avg_by_genre <- tapply(spotify_songs[[variable_name]], spotify_songs$playlist_genre, mean)
print(avg_by_genre)
formula_str <- paste(variable_name, "~ playlist_genre")
anova_result <- aov(as.formula(formula_str), data = spotify_songs)
print(summary(anova_result))
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
}
for (variable in numerical_variables) {
cat("\n")
cat("\n")
analyze_variable_hist(variable)
cat("\n")
cat("\n")
analyze_variable_box(variable)
cat("\n")
cat(variable)
cat("\n")
analyze_variable_ANOVA (variable)
print("NEXT>>>>NEXT>>>>NEXT>>>>NEXT>>>>NEXT>>>>NEXT>>>>NEXT>>>>")
}
spotify_songs <- spotify_songs %>%
mutate(year_group = 5 * (track_album_release_year %/% 5))
spotify_songs %>%
ggplot(aes(x = factor(year_group),
y = track_popularity,
fill = year_group)) +
geom_boxplot() +
xlab("Year Group (5-year intervals)") +
ylab("Track Popularity") +
ggtitle("Fig33. Track Popularity by 5-year Intervals") +
theme_minimal()
spotify_songs <- spotify_songs %>%
dplyr::select(-year_group)
spotify_songs %>%
group_by(track_album_release_year) %>%
summarize(avg_popularity = mean(track_popularity)) %>%
ggplot(aes(x = track_album_release_year, y = avg_popularity)) +
geom_point() +
geom_line() +
xlab("Year") +
ylab("Average Track Popularity") +
ggtitle("Fig34. Average Track Popularity by Year") +
theme_minimal()
spotify_songs %>% ggplot(aes(x = track_album_release_year, y =track_popularity)) +
geom_point(alpha = 0.1) +
geom_smooth( formula = y ~ x, method = "loess") +
ggtitle("Fig3.Track_popularity-Year(detaied)")
linear_model <- lm(track_popularity ~track_album_release_year,
data = spotify_songs)
summary(linear_model)
spotify_songs_recipe_PCA <- recipe( playlist_genre ~ ., data = spotify_songs ) %>%
step_normalize(all_predictors() ) %>% # Normalise our predictors
step_pca(all_predictors() ) # Do the PCA.
spotify_songs_recipe_PCA
spotify_songs_prepped <- spotify_songs_recipe_PCA %>% prep()
tidy(spotify_songs_prepped)
sdev <- spotify_songs_prepped$steps[[2]]$res$sdev
ve <- sdev^2 / sum(sdev ^2)
variance_explained <- ve * 100
sorted_var_explained <- sort(variance_explained, decreasing = TRUE)
cumulative_var_explained <- cumsum(sorted_var_explained)
PC_CUM <- data.frame(PC = 1:length(cumulative_var_explained),
cumulative_var_explained = cumulative_var_explained)
PC_CUM %>% filter(cumulative_var_explained > 95)
PC_CUM %>% ggplot(aes(x = PC , y = cumulative_var_explained)) + geom_point() + geom_line() +
ggtitle("Fig36. Proportion of Total Variance Explained by PC") + xlab("PC") +
ylab("Proportion of Variance Explained")
set.seed(1897402)
songs_per_genre <- 1000
spotify_songs_sampled  <- spotify_songs %>%
group_by(playlist_genre) %>%
sample_n(songs_per_genre) %>%
ungroup()
skim(spotify_songs_sampled)
set.seed(1897402)
spotify_songs_split <- initial_split(spotify_songs_sampled,
strata = playlist_genre)
spotify_songs_split
spotify_songs_train <- training(spotify_songs_split)
spotify_songs_test <- testing(spotify_songs_split)
head(spotify_songs_train)
spotify_songs_train %>% count(playlist_genre) %>%
mutate(percent = prop.table(n) * 100)
spotify_songs_test %>% count(playlist_genre)  %>%
mutate(percent = prop.table(n) * 100)
spotify_songs_rcp <- recipe(playlist_genre ~ ., data = spotify_songs_train) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_corr(all_predictors()) %>%
prep()
spotify_songs_rcp
spotify_train_prep <- juice(spotify_songs_rcp)
spotify_train_prep %>% head()
spotify_test_prep <- bake(spotify_songs_rcp, new_data = spotify_songs_test)
spotify_test_prep %>% head()
set.seed(1897402)
spotify_cv <- vfold_cv(
data = spotify_train_prep,
v = 5,
strata = playlist_genre)
spotify_cv %>%
slice( 1 ) %>%
pull( splits )
set.seed(1897402)
spotify_bootstrap <- bootstraps(spotify_train_prep, times = 10,  strata = playlist_genre )
lda_model <- discrim_linear(mode = "classification") %>%
set_engine("MASS")
spotify_resamples <- fit_resamples(
object = lda_model,
preprocessor = recipe(playlist_genre ~ ., data = spotify_train_prep),
resamples = spotify_bootstrap,
control = control_resamples(save_pred = T)
)
prediction_lda <- spotify_resamples %>% collect_predictions()
metrics_lda <- spotify_resamples %>% collect_metrics()
lda_10cfm <- prediction_lda %>%
group_by(id) %>%
conf_mat(truth = playlist_genre, estimate = .pred_class) %>%
pull(conf_mat)
lda_boost_result <- spotify_resamples %>%
collect_predictions() %>%
group_by(id)
confusionMatrix(lda_boost_result$.pred_class, as_factor(lda_boost_result$playlist_genre))
knn_model <- nearest_neighbor(
mode = "classification",
neighbors = tune()
) %>%
set_engine("kknn")
k_grid <- grid_regular(
levels = 20,
neighbors(range = c(1, 100))) %>%
as_tibble()
spotify_knn_tune <- tune_grid(
object = knn_model,
resamples = spotify_bootstrap,
grid = k_grid,
preprocessor = recipe(playlist_genre ~., data = spotify_train_prep),
)
best.k <- spotify_knn_tune %>%
select_best("accuracy")
best.k
knn_model_best <-
nearest_neighbor(mode = "classification",
neighbors = best.k$neighbors) %>%
set_engine( "kknn" )
knn_model_best
spotify_knn_tune %>% collect_metrics()
rf_spec <- rand_forest(mode = "classification",
trees = 100,
mtry = tune(),
min_n = tune()) %>%
set_engine("ranger", importance = "permutation")
rf_grid <- grid_regular(
finalize( mtry(),
spotify_train_prep%>%
dplyr::select( -playlist_genre ) ),
min_n(),
levels = 5 )
set.seed(1897402)
doParallel::registerDoParallel() # This makes macs run a little faster
spotify_rf_tune <- tune_grid(object = rf_spec,
preprocessor = recipe(playlist_genre ~ ., data = spotify_train_prep),
resamples = spotify_bootstrap,
grid = rf_grid)
spotify_rf_tune %>%
collect_metrics() %>%
mutate( min_n = as.factor( min_n ) ) %>%
ggplot( aes( x = mtry, y = mean, colour = min_n ) ) +
geom_point( size = 2 ) +
geom_line( alpha = 0.75 ) +
ggtitle("Fig37. Accuracy and ROC_AUC in different param")+
facet_wrap( ~ .metric, scales = "free", nrow = 3 )
best_rf_acc <- select_best(spotify_rf_tune, "accuracy" )
best_rf_acc
rf_model_best <- finalize_model( rf_spec, best_rf_acc )
rf_model_best
model_build_function <- function(model) {
model.cv <- fit_resamples(
object = model,
preprocessor = recipe(playlist_genre ~ . ,
data = spotify_train_prep),
resamples = spotify_cv,
control = control_resamples(save_pred = T))
model.metrics <- model.cv %>%
collect_metrics()
model.prediction <- model.cv %>%
collect_predictions()
return(list(metrics = model.metrics, prediction = model.prediction))
}
genre = c(".pred_edm",".pred_latin",".pred_pop",".pred_r&b",".pred_rap",".pred_rock" )
genrename = c("edm","latin","pop","r&b","rap","rock" )
ROC_plot <- function(prediction,i){
predictions <-
prediction %>%
mutate(.pred_other = 1 - across(genre[i])) %>%
mutate(playlist_genre = ifelse(playlist_genre == genrename[i],genrename[i], "other")) %>%
mutate(playlist_genre = factor(playlist_genre, levels = c(genrename[i], "other"))) %>%
mutate(.pred_class = ifelse(.pred_class == genrename[i],genrename[i],"other"))
plot <- predictions %>% group_by( id ) %>%
roc_curve( truth = as_factor(playlist_genre), estimate = genre[i] ) %>%
ggplot(aes(x= 1-specificity, y = sensitivity)) + geom_point(alpha = 0.2, color = "red") +
ggtitle(paste("ROC curve of ", genrename[i])) + theme_minimal()
return(plot)
}
AUC_value <- function(prediction,i){
predictions <-
prediction %>%
mutate(.pred_other = 1 - across(genre[i])) %>%
mutate(playlist_genre = ifelse(playlist_genre == genrename[i],genrename[i], "other")) %>%
mutate(playlist_genre = factor(playlist_genre, levels = c(genrename[i], "other"))) %>%
mutate(.pred_class = ifelse(.pred_class == genrename[i],genrename[i],"other"))
roc_data <- predictions %>% group_by( id ) %>%
roc_curve( truth = as_factor(playlist_genre), estimate = genre[i])
return(roc_data)
}
lda.cv.model <- model_build_function(lda_model)
lda.prediction  <- lda.cv.model$prediction
lda.cv.model$metrics
lda.cfm <- confusionMatrix(lda.prediction$.pred_class, as_factor(lda.prediction$playlist_genre))
lda.cfm
plot <- lapply(1:6, function(x) (ROC_plot(lda.prediction,x)))
print(plot)
knn.cv.model <- model_build_function(knn_model_best)
knn.prediction  <- knn.cv.model$prediction
knn.cv.model$metrics
knn.cmf <- confusionMatrix(knn.prediction$.pred_class, as_factor(knn.prediction$playlist_genre))
knn.cmf
plot <- lapply(1:6, function(x) (ROC_plot(knn.prediction,x)))
rf.cv.model <- model_build_function(rf_model_best)
rf.prediction  <- rf.cv.model$prediction
rf.cv.model$metrics
confusionMatrix(rf.prediction$.pred_class, as_factor(rf.prediction$playlist_genre))
rf.cfm <- confusionMatrix(rf.prediction$.pred_class, as_factor(rf.prediction$playlist_genre))
rf.cfm
plot <- lapply(1:6, function(x) (ROC_plot(rf.prediction,x)))
set.seed(1897402)
rf.final <- rf_model_best %>%
fit( playlist_genre ~ . , data = spotify_train_prep)
rf.final %>% vip()
test_pred <- predict(rf.final, # The predictions
new_data = spotify_test_prep) %>%
bind_cols( spotify_test_prep %>%  # Add the truth
dplyr::select( playlist_genre ) )
confusionMatrix(test_pred$.pred_class,as_factor(test_pred$playlist_genre))
test_pred_prob <- predict(rf.final,
spotify_test_prep,
type = "prob" )
colnames(test_pred_prob) <- genrename
pROC::multiclass.roc(spotify_test_prep$playlist_genre,
as.matrix(test_pred_prob))
lda.cv.model <- model_build_function(lda_model)
lda.prediction  <- lda.cv.model$prediction
lda.cv.model$metrics
lda.cfm <- confusionMatrix(lda.prediction$.pred_class, as_factor(lda.prediction$playlist_genre))
lda.cfm
plot <- lapply(1:6, function(x) (ROC_plot(lda.prediction,x,37)))
genre = c(".pred_edm",".pred_latin",".pred_pop",".pred_r&b",".pred_rap",".pred_rock" )
genrename = c("edm","latin","pop","r&b","rap","rock" )
ROC_plot <- function(prediction,i,idx){
index = idx+i
predictions <-
prediction %>%
mutate(.pred_other = 1 - across(genre[i])) %>%
mutate(playlist_genre = ifelse(playlist_genre == genrename[i],genrename[i], "other")) %>%
mutate(playlist_genre = factor(playlist_genre, levels = c(genrename[i], "other"))) %>%
mutate(.pred_class = ifelse(.pred_class == genrename[i],genrename[i],"other"))
plot <- predictions %>% group_by( id ) %>%
roc_curve( truth = as_factor(playlist_genre), estimate = genre[i] ) %>%
ggplot(aes(x= 1-specificity, y = sensitivity)) + geom_point(alpha = 0.2, color = "red") +
ggtitle(paste("Fig",index,". ROC curve of ", genrename[i])) + theme_minimal()
return(plot)
}
AUC_value <- function(prediction,i){
predictions <-
prediction %>%
mutate(.pred_other = 1 - across(genre[i])) %>%
mutate(playlist_genre = ifelse(playlist_genre == genrename[i],genrename[i], "other")) %>%
mutate(playlist_genre = factor(playlist_genre, levels = c(genrename[i], "other"))) %>%
mutate(.pred_class = ifelse(.pred_class == genrename[i],genrename[i],"other"))
roc_data <- predictions %>% group_by( id ) %>%
roc_curve( truth = as_factor(playlist_genre), estimate = genre[i])
return(roc_data)
}
lda.cv.model <- model_build_function(lda_model)
lda.prediction  <- lda.cv.model$prediction
lda.cv.model$metrics
lda.cfm <- confusionMatrix(lda.prediction$.pred_class, as_factor(lda.prediction$playlist_genre))
lda.cfm
plot <- lapply(1:6, function(x) (ROC_plot(lda.prediction,x,37)))
print(plot)
genre = c(".pred_edm",".pred_latin",".pred_pop",".pred_r&b",".pred_rap",".pred_rock" )
genrename = c("edm","latin","pop","r&b","rap","rock" )
ROC_plot <- function(prediction,i,idx,model_name){
index = idx+i
predictions <-
prediction %>%
mutate(.pred_other = 1 - across(genre[i])) %>%
mutate(playlist_genre = ifelse(playlist_genre == genrename[i],genrename[i], "other")) %>%
mutate(playlist_genre = factor(playlist_genre, levels = c(genrename[i], "other"))) %>%
mutate(.pred_class = ifelse(.pred_class == genrename[i],genrename[i],"other"))
plot <- predictions %>% group_by( id ) %>%
roc_curve( truth = as_factor(playlist_genre), estimate = genre[i] ) %>%
ggplot(aes(x= 1-specificity, y = sensitivity)) + geom_point(alpha = 0.2, color = "red") +
ggtitle(paste("Fig",index,". ROC curve of ", genrename[i],"for ", model_name)) + theme_minimal()
return(plot)
}
AUC_value <- function(prediction,i){
predictions <-
prediction %>%
mutate(.pred_other = 1 - across(genre[i])) %>%
mutate(playlist_genre = ifelse(playlist_genre == genrename[i],genrename[i], "other")) %>%
mutate(playlist_genre = factor(playlist_genre, levels = c(genrename[i], "other"))) %>%
mutate(.pred_class = ifelse(.pred_class == genrename[i],genrename[i],"other"))
roc_data <- predictions %>% group_by( id ) %>%
roc_curve( truth = as_factor(playlist_genre), estimate = genre[i])
return(roc_data)
}
lda.cv.model <- model_build_function(lda_model)
lda.prediction  <- lda.cv.model$prediction
lda.cv.model$metrics
lda.cfm <- confusionMatrix(lda.prediction$.pred_class, as_factor(lda.prediction$playlist_genre))
lda.cfm
plot <- lapply(1:6, function(x) (ROC_plot(lda.prediction,x,37,"LDA")))
print(plot)
knn.cv.model <- model_build_function(knn_model_best)
knn.prediction  <- knn.cv.model$prediction
knn.cv.model$metrics
knn.cmf <- confusionMatrix(knn.prediction$.pred_class, as_factor(knn.prediction$playlist_genre))
knn.cmf
plot <- lapply(1:6, function(x) (ROC_plot(knn.prediction,x,43,"KNN")))
print(plot)
rf.cv.model <- model_build_function(rf_model_best)
rf.prediction  <- rf.cv.model$prediction
rf.cv.model$metrics
confusionMatrix(rf.prediction$.pred_class, as_factor(rf.prediction$playlist_genre))
rf.cfm <- confusionMatrix(rf.prediction$.pred_class, as_factor(rf.prediction$playlist_genre))
rf.cfm
plot <- lapply(1:6, function(x) (ROC_plot(rf.prediction,x,49,"Random Forest")))
print(plot)
set.seed(1897402)
rf.final <- rf_model_best %>%
fit( playlist_genre ~ . , data = spotify_train_prep)
rf.final %>% vip() + ggtitle("Fig 56. The importance RANK of feartures")
