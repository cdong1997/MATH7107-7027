humidity = c(74, 57, 35, 76)
)
newdata %>% arrange(date)
Evaporation_pred <- round(predict(lm3, newdata[2,], interval = "prediction",level = 0.95),3)
result_df <- data.frame(date = date, Evaporation_pred = Evaporation_pred)
result_df %>% arrange(date)
Evaporation_pred <- round(predict(lm3, newdata[2,6], interval = "prediction",level = 0.95),3)
Evaporation_pred <- round(predict(lm3, newdata[,2:6], interval = "prediction",level = 0.95),3)
result_df <- data.frame(date = date, Evaporation_pred = Evaporation_pred)
result_df %>% arrange(date)
Evaporation_pred <- round(predict(lm3, newdata[:,2:6], interval = "prediction",level = 0.95),3)
Evaporation_pred <- round(predict(lm3, newdata[,2:6], interval = "prediction",level = 0.95),3)
result_df <- data.frame(date = date, Evaporation_pred = Evaporation_pred)
result_df %>% arrange(date)
newdata
result_df %>% arrange(date)
predictions <- predict(lm3, newdata, se.fit = TRUE)
# 计算单侧置信区间（例如，上界）
alpha <- 0.05  # 设置显著性水平
z <- qnorm(1 - alpha)  # 正态分布的临界值
upper_bound <- predictions$fit + z * predictions$se.fit
# 将预测结果与置信区间上界合并为一个数据框
predictions_df <- data.frame(fit = predictions$fit, upper_bound = upper_bound)
# 将预测结果与原始数据合并
result_df <- cbind(newdata, predictions_df)
# 将日期列添加到结果数据框
result_df$index <- date
# 以整洁的格式显示数据框
result_df <- result_df %>%
gather("type", "value", -index, -month, -wday, -maxtemp, -mintemp, -humidity)
# 显示结果数据框
result_df
predictions <- predict(lm3, newdata, se.fit = TRUE)
# 计算单侧置信区间（例如，上界）
alpha <- 0.05  # 设置显著性水平
z <- qnorm(1 - alpha)  # 正态分布的临界值
upper_bound <- predictions$fit + z * predictions$se.fit
# 将预测结果与置信区间上界合并为一个数据框
predictions_df <- data.frame(fit = predictions$fit, upper_bound = upper_bound)
# 将预测结果与原始数据合并
result_df <- cbind(newdata, predictions_df)
# 将日期列添加到结果数据框
result_df$index <- date
# 以整洁的格式显示数据框
result_df <- result_df %>%
gather("type", "value", -index, -month, -wday, -maxtemp, -mintemp, -humidity)
# 显示结果数据框
result_df
# 使用lm3模型对新数据进行预测
predictions <- predict(lm3, newdata, se.fit = TRUE)
# 计算单侧置信区间 (0, 0.95)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
upper_bound_1 <- predictions$fit + z_1 * predictions$se.fit
# 计算单侧置信区间 (0.05, 1)
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
upper_bound_2 <- predictions$fit + z_2 * predictions$se.fit
# 将预测结果与两个置信区间的上界合并为一个数据框
predictions_df <- data.frame(
fit = predictions$fit,
upper_bound_1 = upper_bound_1,
upper_bound_2 = upper_bound_2
)
# 将日期列添加到结果数据框
predictions_df$index <- date
# 显示结果数据框
predictions_df
# 使用lm3模型对新数据进行预测
predictions <- predict(lm3, newdata, se.fit = TRUE)
# 计算单侧置信区间 (0, 0.95)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
uppr_0.95 <- predictions$fit + z_1 * predictions$se.fit
# 计算单侧置信区间 (0.05, 1)
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
lwr_0.05 <- predictions$fit + z_2 * predictions$se.fit
# 将预测结果与两个置信区间的上界合并为一个数据框
predictions_df <- data.frame(
fit = predictions$fit,
uppr_0.95 = uppr_0.95,
lwr_0.05 = lwr_0.05
)
# 将日期列添加到结果数据框
predictions_df$index <- date
# 显示结果数据框
predictions_df
# 使用lm3模型对新数据进行预测
predictions <- predict(lm3, newdata, se.fit = TRUE)
# 计算单侧置信区间 (0, 0.95)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
uppr_0.95 <- predictions$fit + z_1 * predictions$se.fit
# 计算单侧置信区间 (0.05, 1)
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
lwr_0.05 <- predictions$fit + z_2 * predictions$se.fit
# 将预测结果与两个置信区间的上界合并为一个数据框
predictions_df <- data.frame(
index <- date
fit = predictions$fit,
# 使用lm3模型对新数据进行预测
predictions <- predict(lm3, newdata, se.fit = TRUE)
# 计算单侧置信区间 (0, 0.95)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
uppr_0.95 <- predictions$fit + z_1 * predictions$se.fit
# 计算单侧置信区间 (0.05, 1)
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
lwr_0.05 <- predictions$fit + z_2 * predictions$se.fit
# 将预测结果与两个置信区间的上界合并为一个数据框
predictions_df <- data.frame(
index <- date,
fit = predictions$fit,
uppr_0.95 = uppr_0.95,
lwr_0.05 = lwr_0.05
)
# 显示结果数据框
predictions_df
# 使用lm3模型对新数据进行预测
predictions <- predict(lm3, newdata, se.fit = TRUE)
# 计算单侧置信区间 (0, 0.95)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
uppr_0.95 <- predictions$fit + z_1 * predictions$se.fit
# 计算单侧置信区间 (0.05, 1)
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
lwr_0.05 <- predictions$fit + z_2 * predictions$se.fit
# 将预测结果与两个置信区间的上界合并为一个数据框
predictions_df <- data.frame(
index <- date,
fit = predictions$fit,
uppr_0.95 = uppr_0.95,
lwr_0.05 = lwr_0.05
)
# 显示结果数据框
predictions_df %>% arrage(date)
# 显示结果数据框
predictions_df %>% arrange(date)
predictions <- predict(lm3, newdata, se.fit = TRUE)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
uppr_0.95 <- predictions$fit + z_1 * predictions$se.fit
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
lwr_0.05 <- predictions$fit + z_2 * predictions$se.fit
predictions_df <- data.frame(
index <- date,
uppr_0.95 = uppr_0.95,
lwr_0.05 = lwr_0.05
)
# 显示结果数据框
predictions_df %>% arrange(date)
predictions_df %>% arrange(date)
predictions <- predict(lm3, newdata, se.fit = TRUE)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
uppr_0.95 <- predictions$fit + z_1 * predictions$se.fit
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
lwr_0.05 <- predictions$fit + z_2 * predictions$se.fit
predictions_df <- data.frame(
index <- date,
uppr_0.95 = uppr_0.95,
lwr_0.05 = lwr_0.05
)
predictions_df %>% arrange(date) %>% round(3)
predictions <- predict(lm3, newdata, se.fit = TRUE)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
uppr_0.95 <- round(predictions$fit + z_1 * predictions$se.fit,3)
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
lwr_0.05 <- round(predictions$fit + z_2 * predictions$se.fit,3)
predictions_df <- data.frame(
index <- date,
uppr_0.95 = uppr_0.95,
lwr_0.05 = lwr_0.05
)
predictions_df %>% arrange(date)
predictions_df %>% arrange(date)
lm3 <- lm(Evaporation ~ month + mintemp + humidity  + humidity:month , data = MWC_df)
summary(lm3)
anova(lm3)
lm3 <- lm(Evaporation ~ month + mintemp + humidity  + humidity:month , data = MWC_df)
summary(lm3)
anova(lm3)
lm3 <- lm(Evaporation ~ month + mintemp + humidity  + humidity:month , data = MWC_df)
summary(lm3)
anova(lm3)
lm2 <- lm(Evaporation ~ month + wday+ mintemp + humidity + humidity:month , data = MWC_df)
summary(lm2)
anova(lm2)
lm3 <- lm(Evaporation ~ month + mintemp + humidity  + humidity:month , data = MWC_df)
summary(lm3)
anova(lm3)
MWC <- read.csv("melbourne.csv")
MWC_df <- MWC[c(1,2,3,11,5)]
MWC_df["month"] = lapply(MWC_df[1], month)
MWC_df["wday"] =lapply(MWC_df[1], wday)
MWC_df <- MWC_df[c("month","wday","Maximum.Temperature..Deg.C.", "Minimum.temperature..Deg.C.","X9am.relative.humidity....","Evaporation..mm.")]
colnames(MWC_df) <- c("month", "wday","maxtemp","mintemp","humidity","Evaporation")
MWC_df %>% str()
MWC_df$month <- as.factor(MWC_df$month)
MWC_df$wday <- as.factor(MWC_df$wday)
MWC_df %>% head()
MWC_df %>% is.na() %>% colSums()
MWC_df <- MWC_df %>% na.omit()
MWC_df %>% is.na() %>% colSums()
ggplot(data = MWC_df, aes(x = month, y = Evaporation, fill = month)) +
geom_boxplot() +
ggtitle("fig1. Evaporation(mm) vs Month") +
ylab("Evaporation (mm)") +
xlab("Month")
ggplot(data = MWC_df, aes(x = wday, y = Evaporation, fill = wday)) +
geom_boxplot() +
ggtitle("fig2. Evaporation(mm) vs Day of the week") +
ylab("Evaporation (mm)") +
xlab("Day of the week")
ggplot(data = MWC_df, aes(x = maxtemp, y = Evaporation)) +
geom_point() + geom_smooth()+
ggtitle("fig3. Evaporation(mm) vs Maximum temperature in degrees Celsius")+
ylab("Evaporation (mm)")+
xlab("Maximum temperature(°C)")
ggplot(data = MWC_df, aes(x = mintemp, y = Evaporation)) +
geom_point() + geom_smooth()+
ggtitle("fig4. Evaporation(mm) vs Minimum temperature in degrees Celsius")+
ylab("Evaporation (mm)")+
xlab("Minimum temperature(°C)")
ggplot(data = MWC_df, aes(x = humidity, y = Evaporation)) +
geom_point() + geom_smooth()+
ggtitle("fig5. Evaporation(mm) vs Relative humidity at 9am")+
ylab("Evaporation (mm)")+
xlab("Relative humidity at 9am")
lm1 <- lm(Evaporation ~ month + wday+ mintemp + maxtemp + humidity + humidity:month , data = MWC_df)
summary(lm1)
anova(lm1)
lm2 <- lm(Evaporation ~ month + wday+ mintemp + humidity + humidity:month , data = MWC_df)
summary(lm2)
anova(lm2)
lm3 <- lm(Evaporation ~ month + mintemp + humidity  + humidity:month , data = MWC_df)
summary(lm3)
anova(lm3)
cor(x = MWC_df$maxtemp,MWC_df$mintemp)
plot(lm3, which =1, sub = "fig6. Check Assumption 1: Linearity")
plot(lm3, which =3, sub = "fig7. Check Assumption 2: Homoscedasticity")
plot(lm3, which =2, sub = "fig8. Check Assumption 2: Normality")
date <- c(ymd("2020-02-29"), ymd("2020-12-25"), ymd("2020-01-13"), ymd("2020-07-06"))
newdata <- tibble(
date = c(ymd("2020-02-29"), ymd("2020-12-25"), ymd("2020-01-13"), ymd("2020-07-06")),
month = as.factor(month(date)),
wday = as.factor(wday(date)),
maxtemp = c(23.2, 31.9, 44.3, 10.6),
mintemp = c(13.8, 16.4, 26.5, 6.8),
humidity = c(74, 57, 35, 76)
)
newdata %>% arrange(date)
Evaporation_pred <- round(predict(lm3, newdata[,2:6], interval = "prediction",level = 0.95),3)
result_df <- data.frame(date = date, Evaporation_pred = Evaporation_pred)
result_df %>% arrange(date)
predictions <- predict(lm3, newdata, se.fit = TRUE)
alpha_1 <- 0.05
z_1 <- qnorm(1 - alpha_1)
uppr_0.95 <- round(predictions$fit + z_1 * predictions$se.fit,3)
alpha_2 <- 0.95
z_2 <- qnorm(1 - alpha_2)
lwr_0.05 <- round(predictions$fit + z_2 * predictions$se.fit,3)
predictions_df <- data.frame(
index <- date,
uppr_0.95 = uppr_0.95,
lwr_0.05 = lwr_0.05
)
predictions_df %>% arrange(date)
knitr::opts_chunk$set(echo = TRUE)
lm3 <- lm(Evaporation ~ month + mintemp + humidity  +
humidity:month , data = MWC_df)
summary(lm3)
anova(lm3)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, tidymodels)
data("penguins", package = "palmerpenguins")
pacman::p_load(tidyverse, tidymodels,palmerpenguins)
data("penguins", package = "palmerpenguins")
penguin_M1 <- workflow() %>%
add_formula(flipper_length_mm ~ body_mass_g) %>%
add_model( linear_reg() %>% set_engine("lm") ) %>%
fit(penguins)
penguin_M1
penguin_M2 <- workflow() %>%
add_formula(sex ~ body_mass_g) %>%
add_model(
logistic_reg() %>%
set_engine("glm")
) %>%
fit(penguins)
penguin_M2
penguins_pred <- penguins %>%
bind_cols( predict(penguin_M1, penguins),
predict(penguin_M2, penguins),
predict(penguin_M2, penguins,type = "prob"),
) %>%
select(sex, flipper_length_mm,starts_with(".pred"))
penguins_pred
penguin_M2 <- workflow() %>%
add_formula(sex ~ body_mass_g) %>%
add_model(
logistic_reg() %>%
set_engine("glm")
) %>%
fit(penguins)
penguin_M2
# The response variable is flipper length and the predictor is body mass.
# The response variable is sex and the predictor is body mass.
penguins_pred <- penguins %>%
bind_cols( predict(penguin_M1, penguins),
predict(penguin_M2, penguins),
predict(penguin_M2, penguins,type = "prob"),
) %>%
select(sex, flipper_length_mm,starts_with(".pred"))
penguins_pred
penguins_pred %>% conf_mat( truth = sex, estimate = .pred_class )
penguins_pred %>% sens( truth = sex, estimate = .pred_class )
categorical_metrics <- metric_set(sens, spec, precision, recall)
penguins_pred %>%
categorical_metrics( truth = sex, estimate = .pred_class )
penguins_pred %>%
roc_curve( truth = sex, estimate = .pred_female ) %>%
autoplot()
penguins_pred %>% roc_auc( truth = sex, estimate = .pred_female )
set.seed(2021) penguin_split <- initial_split(penguins)
set.seed(2021)
penguin_split <- initial_split(penguins)
penguin_split
set.seed(2021)
penguin_split <- initial_split(penguins)
penguin_split
penguins_train <- training(penguin_split)
penguins_test <- testing(penguin_split)
penguin_CV <- vfold_cv(penguins_train)
penguin_CV
linear_model <- linear_reg() %>%
set_engine("lm")
penguin_linear_workflow <- workflow() %>%
add_model(linear_model) %>%
add_formula(bill_length_mm ~ body_mass_g)
logistic_model <- logistic_reg() %>%
set_engine("glm")
penguin_logistic_workflow <- workflow() %>%
add_model(logistic_model) %>%
add_formula(sex ~ body_mass_g)
penguin_linear_resamples <- fit_resamples( penguin_linear_workflow, resamples = penguin_CV ) penguin_linear_resamples
penguin_linear_resamples <- fit_resamples(
penguin_linear_workflow,
resamples = penguin_CV )
penguin_linear_resamples
control = control_resamples(save_pred = TRUE)
penguin_logistic_resamples <-
fit_resamples( penguin_logistic_workflow,
resamples = penguin_CV,
control = control_resamples(save_pred = TRUE)
)
penguin_linear_resamples %>% unnest(.metrics)
penguin_linear_resamples %>% collect_metrics()
penguin_logistic_resamples %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(truth = sex, estimate = .pred_female) %>%
autoplot() +
harrypotter::scale_color_hp("Ravenclaw", discrete = TRUE)
penguin_linear_resamples %>% unnest(.metrics)
penguin_linear_resamples %>% collect_metrics()
pacman::p_load(tidyverse, tidymodels,palmerpenguins,harrypotter)
data("penguins", package = "palmerpenguins")
penguin_logistic_resamples %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(truth = sex, estimate = .pred_female) %>%
autoplot() +
harrypotter::scale_color_hp("Ravenclaw", discrete = TRUE)
penguin_linear_workflow %>%
last_fit(penguin_split) %>%
collect_metrics()
penguin_logistic_workflow %>%
last_fit(penguin_split) %>%
collect_metrics()
```{r}
setwd("~/Desktop/Git Project/MDS/MATHS_7107/Week 11")
knitr::opts_chunk$set(echo = TRUE)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine( "MASS" ),
resamples = vfold_cv( titanic, v = 3 )
)
pacman::p_load(tidymodels, tidyverse)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine( "MASS" ),
resamples = vfold_cv( titanic, v = 3 )
)
pacman::p_load(tidymodels, tidyverse, tatanic)
data(tatanic)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine( "MASS" ),
resamples = vfold_cv( titanic, v = 3 )
)
pacman::p_load(tidymodels, tidyverse,titanic)
data(tatanic)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine( "MASS" ),
resamples = vfold_cv( titanic, v = 3 )
)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine( "MASS" ),
resamples = vfold_cv( titanic, v = 3 )
)
pacman::p_load(tidymodels, tidyverse,titanic)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine("MASS"),
resamples = vfold_cv(titanic, v = 3)
)
pacman::p_load(tidymodels, tidyverse,titanic)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine("MASS"),
resamples = vfold_cv(titanic, v = 3)
)
pacman::p_load(tidymodels, tidyverse,titanic)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine("MASS"),
resamples = vfold_cv(titanic, v = 3)
)
library(tidymodels)
library(tidyverse)
library(titanic)
# Load the data
data(Titanic)
titanic_data <- as_tibble(Titanic)
# Create a recipe for preprocessing
titanic_recipe <- recipe(Survived ~ ., data = titanic_data)
# Specify the model
lda_model <- linear_discriminant() %>%
set_engine("MASS")
data(Titanic)
titanic <- as_tibble(Titanic)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine("MASS"),
resamples = vfold_cv(titanic, v = 3)
)
data(Titanic)
titanic <- as_tibble(Titanic)
fit_resamples(
formula = Survived ~ .,
model = discrim_linear() %>% set_engine("MASS"),
resamples = vfold_cv(titanic, v = 3)
)
library(tidymodels)
library(tidyverse)
library(titanic)
# Load the data
data(Titanic)
titanic_data <- as_tibble(Titanic)
# Create a recipe for preprocessing
titanic_recipe <- recipe(Survived ~ ., data = titanic_data)
# Specify the model
lda_model <- discrim_linear() %>%
set_engine("MASS")
# Create a workflow object
lda_workflow <- workflow() %>%
add_model(lda_model) %>%
add_recipe(titanic_recipe)
mpg <- data(mpg)
pacman::p_load(tidymodels, tidyverse,titanic)
mpg <- data(mpg)
mpg <- data(mpg)
mpg
pacman::p_load(tidymodels, tidyverse,titanic,ggplot2)
mpg <- data(mpg)
data(mpg)
mpg
setwd("~/Desktop/Git Project/MDS/MATHS_7107/Week 11")
pacman::p_load(tidymodels, tidyverse,titanic,ggplot2)
library( titanic )
titanic <- as_tibble( titanic::titanic_train )
titanic <- titanic %>% mutate(Survived = factor( Survived ),
Pclass = factor( Pclass ),
Sex = factor( Sex )) %>%
dplyr::select(Survived, Pclass, Age, Sex) %>%
drop_na()
titanic_lda <- discrim_linear( mode = "classification" ) %>%
set_engine( "MASS" ) %>%
fit( Survived ~ Age + Sex + Pclass, data = titanic )
pacman::p_load(tidymodels, tidyverse,titanic,ggplot2,discrim)
library( titanic )
titanic <- as_tibble( titanic::titanic_train )
titanic <- titanic %>% mutate(Survived = factor( Survived ),
Pclass = factor( Pclass ),
Sex = factor( Sex )) %>%
dplyr::select(Survived, Pclass, Age, Sex) %>%
drop_na()
titanic_lda <- discrim_linear( mode = "classification" ) %>%
set_engine( "MASS" ) %>%
fit( Survived ~ Age + Sex + Pclass, data = titanic )
titanic_lda
